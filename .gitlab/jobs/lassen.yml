# Copyright (c) 2010-2024, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

# Override reproducer section to define UMPIRE specific variables.
.lassen_reproducer_vars:
  script:
    - !reference [.reproducer_vars, script]

#TODO: Setup script should be defined as a bash script (but then GIT_STRATEGY cannot be "none" anymore).

# Setup clones the mfem/data repo in ${SHARED_REPOS_DIR}. The build_and_test
# script then symlinks the repo to the parent directory of the MFEM source
# directory. Unit tests that depend on the mfem/data repo will then detect that
# this directory is present and be enabled.
setup:
  stage: jobs-stage-1
  extends: .job_on_lassen
  variables:
    GIT_STRATEGY: none
  script:
    #
    # Setup MFEM_DATA_DIR=${SHARED_REPOS_DIR}/mfem-data, see '.gitlab-ci.yml'
    # and '.gitlab/configs/<machine>-config.yml'
    #
    - export MACHINE_NAME=${CI_MACHINE}
    - echo "MACHINE_NAME = ${MACHINE_NAME}"
    - echo "AUTOTEST = ${AUTOTEST}"
    - echo "AUTOTEST_COMMIT = ${AUTOTEST_COMMIT}"
    - echo "SHARED_REPOS_DIR ${SHARED_REPOS_DIR}"
    - mkdir -p ${SHARED_REPOS_DIR} && cd ${SHARED_REPOS_DIR}
    - command -v flock || echo "Required command 'flock' not found"
    - |
      (
        date
        echo "Waiting to acquire lock on '$PWD/mfem-data.lock' ..."
        # try to get an exclusive lock on fd 9 (mfem-data.lock) repeating the
        # try every 5 seconds; we may want to add a counter for the number of
        # retries to interrupt a potential infinite loop
        while ! flock -n 9; do
          sleep 5
        done
        echo "Acquired lock on '$PWD/mfem-data.lock'"
        date
        # clone/update the mfem/data repo while holding the file lock on
        # 'mfem-data.lock'
        err=0
        if [[ ! -d "mfem-data" ]]; then
          git clone ${MFEM_DATA_REPO} "mfem-data"
        else
          cd "mfem-data" && git pull && cd ..
        fi || err=1
        # sleep for a period to allow NFS to propagate the above changes;
        # clearly, there is no guarantee that other NFS clients will see the
        # changes even after the timeout
        sleep 10
        exit $err
      ) 9> mfem-data.lock
    #
    # Setup ${AUTOTEST_ROOT}/autotest:
    #
    - echo "AUTOTEST_ROOT ${AUTOTEST_ROOT}"
    - mkdir -p ${AUTOTEST_ROOT} && cd ${AUTOTEST_ROOT}
    - |
      (
        date
        echo "Waiting to acquire lock on '$PWD/autotest.lock' ..."
        # try to get an exclusive lock on fd 9 (autotest.lock) repeating the try
        # every 5 seconds; we may want to add a counter for the number of
        # retries to interrupt a potential infinite loop
        while ! flock -n 9; do
          sleep 5
        done
        echo "Acquired lock on '$PWD/autotest.lock'"
        date
        # clone/update the autotest repo while holding the file lock on
        # 'autotest.lock'
        err=0
        if [[ ! -d "autotest" ]]; then
          git clone ${AUTOTEST_REPO}
        else
          cd autotest && git pull && cd ..
        fi || err=1
        # sleep for a period to allow NFS to propagate the above changes;
        # clearly, there is no guarantee that other NFS clients will see the
        # changes even after the timeout
        sleep 10
        exit $err
      ) 9> autotest.lock


########################
# Overridden shared jobs
########################
# When using shared jobs , we can duplicate them here to override description and add necessary changes.
# We keep ${PROJECT_<MACHINE>_VARIANTS} and ${PROJECT_<MACHINE>_DEPS} So that
# the comparison with the original job is easier.


############
# Extra jobs
############
# We do not recommend using ${PROJECT_<MACHINE>_VARIANTS} and
# ${PROJECT_<MACHINE>_DEPS} in the extra jobs. There is not reason not to fully
# describe the spec here.

opt_mpi_cuda_gcc:
  stage: jobs-stage-2
  variables:
    SPEC: "%gcc@8.3.1 +mpi +cuda cuda_arch=70"
  extends: .job_on_lassen

opt_mpi_cuda_hypre_cuda_gcc:
  stage: jobs-stage-2
  variables:
    SPEC: "%gcc@8.3.1 +mpi +cuda cuda_arch=70 ^hypre+cuda~shared cuda_arch=70"
  extends: .job_on_lassen

# Jobs report
.report_job_success:
  script:
    - echo ${MACHINE_NAME}
    - echo ${AUTOTEST}
    - echo ${AUTOTEST_COMMIT}
    - echo "AUTOTEST_ROOT ${AUTOTEST_ROOT}"
    - cd ${AUTOTEST_ROOT}
    - |
      (
        date
        echo "Waiting to acquire lock on '$PWD/autotest.lock' ..."
        # try to get an exclusive lock on fd 9 (autotest.lock) repeating the try
        # every 5 seconds; we may want to add a counter for the number of
        # retries to interrupt a potential infinite loop
        while ! flock -n 9; do
          sleep 5
        done
        echo "Acquired lock on '$PWD/autotest.lock'"
        date
        # Report SUCCESS while holding the file lock on 'autotest.lock'.
        # The next script uses the following environment variables:
        # - MACHINE_NAME, AUTOTEST_ROOT, AUTOTEST_COMMIT
        # - CI_COMMIT_REF_SLUG, CI_PROJECT_DIR, CI_PIPELINE_URL
        # It also calls the script '.gitlab/scripts/safe_create_rundir'.
        ${CI_PROJECT_DIR}/.gitlab/scripts/report_build_and_test_success
        err=$?
        # sleep for a period to allow NFS to propagate the above changes;
        # clearly, there is no guarantee that other NFS clients will see the
        # changes even after the timeout
        sleep 10
        exit $err
      ) 9> autotest.lock

.report_job_failure:
  script:
    - echo ${MACHINE_NAME}
    - echo ${AUTOTEST}
    - echo ${AUTOTEST_COMMIT}
    - echo "AUTOTEST_ROOT ${AUTOTEST_ROOT}"
    - cd ${AUTOTEST_ROOT}
    - |
      (
        date
        echo "Waiting to acquire lock on '$PWD/autotest.lock' ..."
        # try to get an exclusive lock on fd 9 (autotest.lock) repeating the try
        # every 5 seconds; we may want to add a counter for the number of
        # retries to interrupt a potential infinite loop
        while ! flock -n 9; do
          sleep 5
        done
        echo "Acquired lock on '$PWD/autotest.lock'"
        date
        # Report FAILURE while holding the file lock on 'autotest.lock'.
        # The next script uses the following environment variables:
        # - MACHINE_NAME, AUTOTEST_ROOT, AUTOTEST_COMMIT
        # - CI_COMMIT_REF_SLUG, CI_PROJECT_DIR, CI_PIPELINE_URL
        # It also calls the script '.gitlab/scripts/safe_create_rundir'.
        ${CI_PROJECT_DIR}/.gitlab/scripts/report_build_and_test_failure
        err=$?
        # sleep for a period to allow NFS to propagate the above changes;
        # clearly, there is no guarantee that other NFS clients will see the
        # changes even after the timeout
        sleep 10
        exit $err
      ) 9> autotest.lock

# Jobs report
report_job_success:
  stage: jobs-stage-3
  extends: [.on_lassen, .report_job_success]
  when: on_success

report_job_failure:
  stage: jobs-stage-3
  extends: [.on_lassen, .report_job_failure]
  when: on_failure
