"""File to check numpy array for fields generated by equilibrium data handler"""
"""File to extract psi, g data from EFIT files (and similar file formats),
and to return it as numpy arrrays on regular grids"""
import numpy as np
from load_equilibrium_data import Equilibrium_data_handler

# Can optionally plot arrays to check if they look right
plot_arrays = True
save_arrays = True

# File name for equilibrium from which to get data
data_file_name, sd = "EFIT_box.dat", None
# File format
option = "EFIT"

# Interpolation handler
handler = Equilibrium_data_handler(data_file_name, option="EFIT",
                                   separatrix_data=sd, verbose=False)

# B components
B_vals = handler.B_array
B_r, B_phi, B_z = B_vals[:, : ,0], B_vals[:, : ,1], B_vals[:, : ,2]

# J components
J_vals = handler.compute_j()
J_r, J_phi, J_z = J_vals[:, : ,0], J_vals[:, : ,1], J_vals[:, : ,2]

# Optionally save arrays here
if save_arrays:
    array_id = "01"
    np.save(f"Temp_npy/B_array_id{array_id}.npy", B_vals)
    np.save(f"Temp_npy/J_array_id{array_id}.npy", J_vals)

# Can also check arrays from handler.compute_j_cross_B and
# handler.compute_grad_p, noting that we expect grad_p - j_cross_B = 0
# for the equilibrium

# Other arrays: Psi, g (interpolated from Psi(r, z) and EFIT curve g(Psi))
psi = handler.psi
gg = handler.evaluate_g_at_coords(handler.rz_coords)

r_coords = handler.rz_coords[:, 0].reshape(psi.shape)
z_coords = handler.rz_coords[:, 1].reshape(psi.shape)
print(handler.rz_coords)
print(handler.rz_coords.shape)

# Can use plotting functionality for arrays
if plot_arrays:
    arr_t_ = [(psi, 'psi'), (r_coords, 'r'), (z_coords, 'z'), (gg, 'g'),
              (B_r, 'B_r'), (B_phi, 'B_phi'), (B_z, 'B_z'),
              (J_r, 'J_r'), (J_phi, 'J_phi'), (J_z, 'J_z')]

    for arr_, t_ in arr_t_:
        handler.plot_contour_and_field(arr_, step=1, \
            skip_separatrix='J' in t_, \
            title='{0} as a function of Z, R'.format(t_), \
            save_plot_name=f"Figure_{t_}")
