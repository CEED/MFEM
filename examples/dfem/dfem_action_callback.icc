template <
   typename kernels_tuple,
   size_t num_solutions,
   size_t num_parameters,
   size_t num_fields,
   size_t num_kernels
   >
template <
   typename kernel_t
   >
void DifferentiableOperator<kernels_tuple,
     num_solutions,
     num_parameters,
     num_fields,
     num_kernels>::Action::create_action_callback(
        kernel_t kernel,
        mult_func_t &func)
{
   using entity_t = typename kernel_t::entity_t;

   auto kinput_to_field = create_descriptors_to_fields_map<entity_t>(op.fields,
                                                                     kernel.inputs, std::make_index_sequence<kernel.num_kinputs> {});

   auto koutput_to_field = create_descriptors_to_fields_map<entity_t>(op.fields,
                                                                      kernel.outputs, std::make_index_sequence<kernel.num_koutputs> {});

   constexpr int hardcoded_output_idx = 0;
   const int test_space_field_idx = koutput_to_field[hardcoded_output_idx];

   auto output_fop = std::get<0>(kernel.outputs);

   const int num_elements = mfem::GetNumEntities<Entity::Element>(op.mesh);
   const int num_entities = mfem::GetNumEntities<entity_t>(op.mesh);
   const int num_qp = op.integration_rule.GetNPoints();

   // All solutions T-vector sizes make up the width of the operator, since
   // they are explicitly provided in Mult() for example.

   op.width = GetTrueVSize(op.fields[test_space_field_idx]);
   op.residual_lsize = GetVSize(op.fields[test_space_field_idx]);

   if constexpr (std::is_same_v<decltype(output_fop), One>)
   {
      op.height = 1;
   }
   else
   {
      op.height = op.residual_lsize;
   }

   residual_l.SetSize(op.residual_lsize);

   // assume only a single element type for now
   std::vector<const DofToQuad*> dtqmaps;
   for (const auto &field : op.fields)
   {
      dtqmaps.emplace_back(GetDofToQuad<entity_t>(field, op.integration_rule,
                                                  doftoquad_mode));
   }

   if (residual_e.Size() > 0 &&
       (residual_e.Size() != GetVSize(op.fields[test_space_field_idx]) * num_entities))
   {
      MFEM_ABORT("inconsistent kernels");
   }
   else
   {
      // TODO-bug: allocate correct size here!!!
      // residual_e.SetSize(GetVSize(op.fields[test_space_field_idx]) * num_entities);
      residual_e.SetSize(dtqmaps[hardcoded_output_idx]->ndof *
                         GetVDim(op.fields[hardcoded_output_idx]) *
                         num_entities);
   }

   const int residual_size_on_qp = GetSizeOnQP<entity_t>(
                                      std::get<0>(kernel.outputs),
                                      op.fields[test_space_field_idx]);

   if (residual_qp_mem.Size() > 0 &&
       (residual_qp_mem.Size() != residual_size_on_qp * num_qp * num_entities))
   {
      MFEM_ABORT("inconsistent kernels");
   }
   else
   {
      residual_qp_mem.SetSize(residual_size_on_qp * num_qp * num_entities);
   }

   // Allocate memory for fields on quadrature points
   auto input_qp_mem = create_input_qp_memory(num_qp, kernel.inputs,
                                              std::make_index_sequence<kernel.num_kinputs> {});

   auto input_dtq_ops = create_dtq_operators<entity_t>(kernel.inputs, dtqmaps,
                                                       kinput_to_field);
   auto output_dtq_ops = create_dtq_operators<entity_t>(kernel.outputs, dtqmaps,
                                                        koutput_to_field);

   GeometricFactorMaps geometric_factors =
      GetGeometricFactorMaps<entity_t>(op.mesh, op.integration_rule);

   const Operator *R = get_restriction<entity_t>(op.fields[test_space_field_idx],
                                                 element_dof_ordering);

   func = [this, kernel, num_entities, num_qp, input_dtq_ops,
                 output_dtq_ops, residual_size_on_qp,
                 input_qp_mem, kinput_to_field, koutput_to_field,
                 output_fop, R, geometric_factors]
   (Vector &ye_mem) mutable
   {
      restriction<entity_t>(op.solutions, solutions_l, this->fields_e,
                            op.element_dof_ordering);
      restriction<entity_t>(op.parameters, parameters_l, this->fields_e,
                            op.element_dof_ordering,
                            op.solutions.size());

      auto residual_qp = Reshape(residual_qp_mem.ReadWrite(),
                                 residual_size_on_qp, num_qp, num_entities);

      DeviceTensor<1, const double> integration_weights(
         this->op.integration_rule.GetWeights().Read(), num_qp);

      // Fields interpolated to the quadrature points in the order of
      // kernel function arguments
      auto input_qp = map_inputs_to_memory(input_qp_mem, num_qp,
                                           kernel.inputs,
      std::make_index_sequence<kernel.num_kinputs> {});

      constexpr int fixed_output_idx = 0;
      auto Bv = output_dtq_ops[fixed_output_idx];
      int test_op_qp, test_op_dim, num_test_dof;
      std::tie(test_op_qp, test_op_dim, num_test_dof) = Bv.GetShape();
      const int test_vdim = std::get<0>(kernel.outputs).vdim;
      DeviceTensor<3> ye = Reshape(ye_mem.ReadWrite(), num_test_dof, test_vdim, num_entities);

      auto wrapped_fields_e = wrap_vectors(this->fields_e);

      // kernel function output
      Vector f_qp(residual_size_on_qp);

      // for (int e = 0; e < num_entities; e++)
      mfem::forall(num_entities, [=] MFEM_HOST_DEVICE (int e)
      {
         auto kernel_args = decay_tuple<typename kernel_t::kf_param_ts> {};

         map_fields_to_quadrature_data(
            input_qp, e, wrapped_fields_e,
            kinput_to_field, input_dtq_ops,
            integration_weights, geometric_factors, kernel.inputs,
            std::make_index_sequence<kernel.num_kinputs> {});

         for (int q = 0; q < num_qp; q++)
         {
            auto f_qp = Reshape(&residual_qp(0, q, e), residual_size_on_qp);
            apply_kernel(f_qp, kernel.func, kernel_args, input_qp, q);
         }

         DeviceTensor<3> fhat = Reshape(&residual_qp(0, 0, e), test_vdim, test_op_dim,
                                        num_qp);
         DeviceTensor<2> y = Reshape(&ye(0, 0, e), num_test_dof, test_vdim);
         map_quadrature_data_to_fields(y, fhat,
                                       output_fop,
                                       output_dtq_ops[hardcoded_output_idx]);
      });
      R->MultTranspose(ye_mem, residual_l);
   };

   if constexpr (std::is_same_v<decltype(output_fop), One>)
   {
      restriction_transpose = [](Vector &r_e, Vector &y)
      {
         y = r_e;
      };

      prolongation_transpose = [&](Vector &r_local, Vector &y)
      {
         double local_sum = r_local.Sum();
         MPI_Allreduce(&local_sum, y.GetData(), 1, MPI_DOUBLE, MPI_SUM,
                       op.mesh.GetComm());
         MFEM_ASSERT(y.Size() == 1, "output size doesn't match kernel description");
      };
   }
   else
   {
      auto P = get_prolongation(op.fields[test_space_field_idx]);
      prolongation_transpose = [P](const Vector &r_local, Vector &y)
      {
         P->MultTranspose(r_local, y);
      };
   }
}
